<#@ import namespace="HedgehogDevelopment.CodeGeneration.Extensions" #>
<#@ assembly name="C:\src\codegen\HedgehogDevelopment.CodeGeneration.Extensions.dll" #>

<#+	
private static string ignoreNamespacePath = ".sitecore.templates.User_Defined";

/// <summary>
/// Gets the fuly qualified name of the object.
/// </summary>
/// <param name="defaultNamespace">The default namespace.</param>
/// <param name="template">The template.</param>
public static string GetFullyQualifiedName(string defaultNamespace, SitecoreItem item)
{
	return GetFullyQualifiedName(defaultNamespace, item, HedgehogDevelopment.CodeGeneration.Extensions.StringExtensions.AsClassName);
}

/// <summary>
/// Gets the fuly qualified name of the object.
/// </summary>
/// <param name="defaultNamespace">The default namespace.</param>
/// <param name="template">The template.</param>
/// <param name="nameFunc">The function to run the template name through.</param>
public static string GetFullyQualifiedName(string defaultNamespace, SitecoreItem item, Func<string, string> nameFunc)
{
	return string.Concat(GetNamespace(defaultNamespace, item, true), ".", nameFunc(item.Name));
}

/// <summary>
/// Gets the calculated namespace for the template
/// </summary>
public static string GetNamespace(string defaultNamespace, SitecoreItem item, bool includeGlobal = false)
{
	List<string> namespaceSegments = new List<string>();
	namespaceSegments.Add(defaultNamespace);
	namespaceSegments.Add(item.Namespace);
	string @namespace = namespaceSegments.AsNamespace().Replace(ignoreNamespacePath, string.Empty); // use an extension method in the supporting assembly
	return includeGlobal ? string.Concat("global::", @namespace) : @namespace;
}

/// <summary>
/// Takes multiple namespaces ('.' delimited strings) and joins them together
/// </summary>
/// <param name="namespaces">The namespaces.</param>
public static string JoinNamespaces(params string[] namespaces)
{
	// leverage an extension method in the support assembly
	return namespaces.AsNamespace();
}

/// <summary>
/// Gets a list of all fields from the template. 
/// <para>If desired, fields from all base templates will be included.</para>
/// </summary>
/// <param name="item">The item.</param>
/// <param name="includeBases">if set to <c>true</c> include base template's fields.</param>
public static List<SitecoreField> GetFieldsForTemplate(SitecoreTemplate item, bool includeBases)
{
	List<SitecoreField> fields = new List<SitecoreField>();
	
	// Add direct fields that aren't ignored
	fields.AddRange(item.Fields.Where(f=> GetCustomProperty(f.Data, "ignore") != "true"));
	
	if (includeBases)
	{
		// leverage an extenstion method to recursively select base templates, then flatten the fields down
		IEnumerable<SitecoreField> baseFields = item.BaseTemplates.SelectRecursive(i=>i.BaseTemplates).SelectMany(t=>t.Fields);
		
		// only grab base fields who aren't ignored
		fields.AddRange(baseFields.Where(f=> GetCustomProperty(f.Data, "ignore") != "true"));
	}
	
	return fields;
}

/// <summary>
/// Given a sitecore field, returns the name of the property to use.
/// <para>If the field is plural, it returns a plural property name</para>
/// </summary>
/// <param name="field">The field.</param>
/// <returns>A string to use for a property representing the field</returns>
public static string GetPropertyName(SitecoreField field)
{
	// has the field been configured in TDS with a custom name?
	string customName = GetCustomProperty(field.Data, "name");
	if (!string.IsNullOrEmpty(customName))
	{
		return customName;
	}
	
	bool isFieldPlural = IsFieldPlural(field);
	
	return field.Name.AsPropertyName(isFieldPlural);
}

/// <summary>
/// Determines whether the Sitecore Field holds multiple values.
/// </summary>
/// <param name="field">The field.</param>
/// <returns>
///   <c>true</c> if the field holds multiple values; otherwise, <c>false</c>.
/// </returns>
public static bool IsFieldPlural(SitecoreField field)
{
	string[] multipleValueFields = new string[]
	{
			"treelist",
			"treelistex",
			"treelist descriptive",
			"checklist",
			"multilist"
	};
	
	return multipleValueFields.Contains(field.Type.ToLower());
}

/// <summary>
/// Gets a custom propery from the data assuming it is querystring format
/// </summary>
/// <param name="data">A string in query string format.</param>
/// <param name="key">The key to get the value for.</param>
/// <returns>The value, or an empty string</returns>
public static string GetCustomProperty(string data, string key)
{
	if (string.IsNullOrEmpty(data))
		return "";
	
	string[] strArray = data.Split(new char[] { '&' });
    string keyEquals = key + "=";
    int length = keyEquals.Length;
    foreach (string keyValuePair in strArray)
    {
        if ((keyValuePair.Length > length) && keyValuePair.StartsWith(keyEquals, StringComparison.OrdinalIgnoreCase))
        {
            return keyValuePair.Substring(length);
        }
    }
    return "";
}

public static string GetSitecoreFieldSettings(SitecoreField field)
{
    switch (field.Type.ToLower())
    {
        case "rich text":
            return ", Setting = SitecoreFieldSettings.RichTextRaw";
        default:
            return string.Empty;
    }
}

/*
 public static string GetSitecoreFieldSettings(SitecoreField field)
{
    switch (field.Type.ToLower())
    {
        case "general link":
            return ", SitecoreFieldType.GeneralLink";
        case "date":
            return ", SitecoreFieldType.Date";
        case "datetime":
            return ", SitecoreFieldType.Date";
        case "image":
            return ", SitecoreFieldType.Image";
        case "multi-line text":
            return ", SitecoreFieldType.MultiLineText";
        case "number":
            return ", SitecoreFieldType.Number";
        case "rich text":
            return ", SitecoreFieldType.RichText, Setting = SitecoreFieldSettings.RichTextRaw";
        case "single-line text":
            return ", SitecoreFieldType.SingleLineText";
        case "file":
            return ", SitecoreFieldType.File";
        case "checkbox":
            return ", SitecoreFieldType.Checkbox";
        case "checklist":
            return ", SitecoreFieldType.Checklist";
        case "droplist":
            return ", SitecoreFieldType.Droplist";
        case "grouped droplink":
            return ", SitecoreFieldType.GroupedDroplink";
        case "grouped droplist":
            return ", SitecoreFieldType.GroupedDroplist";
        case "multilist":
            return ", SitecoreFieldType.Multilist";
        case "treelist":
            return ", SitecoreFieldType.Treelist";
        case "treelistex":
            return ", SitecoreFieldType.TreelistEx";
        case "droplink":
            return ", SitecoreFieldType.Droplink";
        case "droptree":
            return ", SitecoreFieldType.DropTree";
        default:
            return string.Empty;
    }
}

*/

#>