<#@ template language="C#" debug="true" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="HedgehogDevelopment.SitecoreProject.VSIP.CodeGeneration.Models" #>
<#@ include file="Includes.tt" #>
<#
// The Item template is called for every Sitecore item elegible for code generation. TDS will execute this T4 template every time a
// template or field on a template changes in TDS. The T4 template is responsible for generating code for only the Sitecore item TDS
// passes to the template. TDS will join all created templates together to create a single file. 
//
// Version 4 of TDS only supports generating code for Sitecore Template items.

// Parameters passed to the T4 Template for code generation

//   Model: This parameter contains information about the Sitecore Item to be generated. The Model will always be a type that inherits from SitecoreItem.
#>
<#@ parameter name="Model" type="HedgehogDevelopment.SitecoreProject.VSIP.CodeGeneration.Models.SitecoreItem" #>
<#
// 	DefaultNamespace: The DefaultNamespace parameter contains the default namespace of the project where the generated
//					  code file resides.
#>
<#@ parameter name="DefaultNamespace" type="System.String" #>
<#
/*   The following types are used during code generation:

/// <summary>
/// Represents the SitecoreItem to be passed to the T4 template. Any object that is a SitecoreItem will inherit from this object.
/// </summary>
public class SitecoreItem
{
    /// <summary>
    /// The Sitecore item ID.
    /// </summary>
    public Guid ID { get; set; }

    /// <summary>
    /// The name of the Sitecore item. This may be different than the Display Name.
    /// </summary>
    public string Name { get; set; }

    /// <summary>
    /// The path to the item from the Sitecore root.
    /// </summary>
    public string Path { get; set; }

    /// <summary>
    /// Any custom data associated with the item. This data can be set on the property page associated with the Sitecore item in the solution explorer.
    /// </summary>
    public string Data { get; set; }

    /// <summary>
    /// The Parent SitecoreItem in the Sitecore hierarchy.
    /// </summary>
    public SitecoreItem Parent { get; set; }

    /// <summary>
    /// The name of the template the item is based on
    /// </summary>
    public string TemplateName { get; set; }

    /// <summary>
    /// The ID of the template the item is based on
    /// </summary>
    public Guid TemplateId { get; set; }

    /// <summary>
    /// Additional sitecore fields. These fields are set on the Code Generation Property page. 
    /// The key in the dictionary is the Field name, the value is the value of the field.
    /// </summary>
    public Dictionary<string, string> SitecoreFields;

	/// <summary>
    /// The calculated Namespace for the item. Each Sitecore item above the template is represented as part of the namespace. 
    /// A new Namespace can be set at any item in the items property page. This allows the code generation namespace to be arranged differently 
    /// than the Sitecore template hierarchy.
    /// </summary>
    public string Namespace { get; set; }
}

/// <summary>
/// Represents Template specific information for code generation.
/// </summary>
public class SitecoreTemplate : SitecoreItem
{
    /// <summary>
    /// The namespace broken out into individual segments.
    /// </summary>
    public IEnumerable<string> NamespaceSegments { get; }

    /// <summary>
    /// A list of all templates this template inherits from.
    /// </summary>
    public List<SitecoreTemplate> BaseTemplates { get; set; }

    /// <summary>
    /// A list of Sitecore Fields that make up this sitecore template.
    /// </summary>
    public List<SitecoreField> Fields { get; set; }
}

/// <summary>
/// Represents Field specific information for code generation.
/// </summary>
public class SitecoreField : SitecoreItem
{
    /// <summary>
    /// The type of the field from the template editor.
    /// </summary>
    public string Type { get; set; }
}
*/			
#>
<#
SitecoreTemplate template = Model as SitecoreTemplate;
if (template!=null)
{#>
namespace VirtualAffairs.Components.Common
{
	///<summary>
	///Generated class for <#= template.Name #> on <#= DateTime.Now.ToString() #>
	///</summary>
	public partial class <#= template.Name #>
	{

	<# doSome(); #>


		//Some default readonly properties:
	    public readonly string TemplateName = "<#= template.Name #>";
	    public readonly Guid TemplateGuid = new Guid("<#= template.ID #>");
		
		//This template has <#= template.Fields.Count #> Fields:
	 <#

	string fieldVisibility = "";
	fieldVisibility="public ";
	
    foreach (var field in template.Fields)
    {
		string fieldType;
		switch (field.Type)
		{
			case "Single-Line Text":
			case "Rich Text":
				fieldType = "string ";
				break;
			case "General Link":
				fieldType = "LinkField ";
				break;
			case "Image":
				fieldType = "ImageField ";
				break;
			case "Date":
				fieldType = "DateField ";
				break;
			case "Multilist":
				fieldType = "IEnumerable<" + field.Data + "> ";
				break;
			default:
				fieldType = "//Unknown Type " + field.Type;
				break;
		}#>
	<#=	fieldVisibility + fieldType + field.Name #> { get; set; } 	
	<#
    } //end of foreach
	#>

	


} //end of class <#= template.Name #>
} //end of namespace

<#
} //end of 'if template' check
#>