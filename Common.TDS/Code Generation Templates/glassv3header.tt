<#@ template language="C#" #>
<#@ include file="Helpers.tt" #>
<#@ assembly name="System.Core.dll" #>

<#@ import namespace="HedgehogDevelopment.CodeGeneration.Extensions" #>
<#@ assembly name="C:\src\codegen\HedgehogDevelopment.CodeGeneration.Extensions.dll" #>

<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="HedgehogDevelopment.SitecoreProject.VSIP.CodeGeneration.Models" #>

<#@ parameter name="Model" type="HedgehogDevelopment.SitecoreProject.VSIP.CodeGeneration.Models.ProjectHeader" #>
<#@ parameter name="DefaultNamespace" type="System.String" #>

#pragma warning disable 1591
#pragma warning disable 0108
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Team Development for Sitecore.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;   
using System.Collections.Generic;   
using System.Linq;
using System.Text;
using Glass.Mapper.Sc;
using Glass.Mapper.Sc.Configuration;
using Glass.Mapper.Sc.Configuration.Attributes;
using Glass.Mapper.Sc.Fields;
using Sitecore.Data;
using Sitecore.Globalization;

<#
// Calculate the top leve namespace as configured in the target project and
// base namespace as defined in the TDS project
string fullNamespace = JoinNamespaces(DefaultNamespace, Model.BaseNamespace);
#>

namespace <#=fullNamespace #>
{
		public static class Helper
    {
        public static Guid GetTemplateIdFromType<T>()
        {
            Type t = typeof (T);
            SitecoreTypeAttribute sitecoreType =
                (SitecoreTypeAttribute)Attribute.GetCustomAttribute(t, typeof(SitecoreTypeAttribute));
            return new Guid(sitecoreType.TemplateId);
        }
    }
		public interface IGlassBase{
		
		[SitecoreId]
		Guid Id{ get; }

		[SitecoreInfo(SitecoreInfoType.Language)]
        Language Language{ get; }

        [SitecoreInfo(SitecoreInfoType.Version)]
        int Version { get; }

        [SitecoreInfo(SitecoreInfoType.Name)]
        string Name { get; set; }

        [SitecoreInfo(SitecoreInfoType.BaseTemplateIds)]
        IEnumerable<Guid> BaseTemplates { get; }

		[SitecoreInfo(SitecoreInfoType.TemplateName)]
        string TemplateName { get; }

		[SitecoreInfo(SitecoreInfoType.TemplateId)]
        Guid TemplateId { get; }

        [SitecoreInfo(SitecoreInfoType.Url)]
        string URL { get; }
		
		[SitecoreChildren(IsLazy = true)]
        IEnumerable<GlassBase> Children { get; set; }

		ISitecoreContext Context { get; }
	

   }

	public abstract class GlassBase : IGlassBase{
		
		private readonly ISitecoreContext _context;

	    protected GlassBase(ISitecoreContext context)
        {
            _context = context;
        }

	    [SitecoreId]
		public virtual Guid Id{ get; private set;}

		[SitecoreInfo(SitecoreInfoType.Language)]
        public virtual Language Language{ get; private set; }

        [SitecoreInfo(SitecoreInfoType.Version)]
        public virtual int Version { get; private set; }

	    [SitecoreInfo(SitecoreInfoType.Name)]
	    public string Name { get; set; }

        [SitecoreInfo(SitecoreInfoType.BaseTemplateIds)]
	    public IEnumerable<Guid> BaseTemplates { get; private set; }

	    [SitecoreInfo(SitecoreInfoType.TemplateName)]
        public string TemplateName { get; private set; }

		[SitecoreInfo(SitecoreInfoType.TemplateId)]
        public Guid TemplateId { get; private set; }

        [SitecoreInfo(SitecoreInfoType.Url)]
        public string URL { get; private set; }

		[SitecoreChildren(IsLazy = true)]
        public virtual IEnumerable<GlassBase> Children { get; set; }

	    public ISitecoreContext Context
	    {
	        get { return _context; }
	    }
	}
}

